/*
 *	cmdlintf.c	(Command Line Interface)
 *
 *	Copyright (c) 2004, Jiann-Ching Liu
 */

#include <sys/types.h>
#include <sys/socket.h>
// #include <netinet/in.h>
#include <sys/un.h>
// #include <arpa/inet.h>
#include <stdarg.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <readline/readline.h>
#include <readline/history.h>
#include "cmdlintf.h"

#define MAX_CMD_WORD_LEN        (64)


typedef struct _cmdstru {
	char		*name;
	int		is_rmt;
	int		(*func)(struct cmdlintf_t *, char *);
	char		*doc;
	int		nargs;
	struct _cmdstru	*subcmd;
	struct _cmdstru	*next;
} command_t;

struct cmdlintf_pd_t {
	char		*sockname;
	volatile short	terminate;
	int		num_of_connection;
	command_t	cmdptr;
	char		*prompt;
	short		have_precommand;
	int		svc_fd;
	// int     	(*print)(const char *fmt, ...);
};

#include "common/words_assist.c"
#include "common/cmds.c"
#include "common/buffer_print.c"

static struct cmdlintf_t	cli_intfinstance;
static struct cmdlintf_t	*cliptr = NULL;
static struct cmdlintf_pd_t	cli_public_data;
static struct cmdlintf_pd_t	*pdptr = &cli_public_data;

// ----------------------------------------------------------

static command_t * find_match_command (const char *text, const int mcnt) {
	command_t	*ptr = &pdptr->cmdptr;
	int		i, found;
	char		*word;

	for (i = 1, found = 0; (i <= mcnt) && (ptr != NULL); i++) {
		if ((word = nthword (text, i)) == NULL) break;
		if ((ptr = ptr->subcmd) == NULL) break;
		for (found = 0; ptr != NULL; ptr = ptr->next) {
			if (strcmp (ptr->name, word) == 0) {
				found = 1;
				break;
			}
		}
	}

	return found ? ptr : NULL;
}

static char * entry_completion (const char *text, int state) {
	static int		iwds, wds;
	static command_t	*cptr = NULL;
	static int		len = 0;
	char			*matches;

	matches = NULL;

	if (! state) {
		len  = strlen (text);
		wds  = nofwords (rl_line_buffer);
		iwds = nofwords (text);

		wds -= iwds;

		// fprintf (stderr, "[%s](%d)\n", rl_line_buffer, wds);

		cptr = find_match_command (rl_line_buffer, wds);

		if (cptr != NULL) {
			if (cptr->subcmd != NULL) {
				cptr = cptr->subcmd;
			} else if (iwds == 0) {
				if (cptr->nargs == 0) {
					cliptr->print ("\n   <cr>\t\t%s\n",
						(cptr->doc == NULL ? ""
						: cptr->doc));
				} else {
					cliptr->print (
						"\n   [%d args]\t\t%s\n",
						cptr->nargs,
						(cptr->doc == NULL ? ""
						: cptr->doc));
				}
				rl_forced_update_display ();
				return NULL;
			} else {
				// rl_forced_update_display ();
				return NULL;
			}
		}
	}

	if (cptr != NULL) {
		while (cptr->name != NULL) {
			if (strncmp (cptr->name, text, len) == 0) {
				matches = strdup (cptr->name);
				cptr = cptr->next;
				break;
			} else {
				cptr = cptr->next;
				if (cptr == NULL) break;
			}
		}
	}

	return matches;
}

static char * command_generator (const char *text, int state) {
	static int		list_index, len;
	static command_t	*ptr = NULL;
	char			*name;

	if (! state) {
		list_index = 0;
		len = strlen (text);
		ptr = pdptr->cmdptr.subcmd;
	}

	while (ptr != NULL) {
		if ((name = ptr->name) != NULL) {
			ptr = ptr->next;
			if (strncmp (name, text, len) == 0)
				// return strdup (name);
				return strdup (name);
			} else {
				ptr = ptr->next;
			}
	}

	return NULL;
}

static char * cli_socket_name (const char *filename) {
	if (filename != NULL) {
		if (pdptr->sockname != NULL) {
			free (pdptr->sockname);
			pdptr->sockname = NULL;
		}

		if (filename[0] != '\0') {
			pdptr->sockname = strdup (filename);
		}
	}

	return pdptr->sockname;
}

static int cli_addcmd (const char *cmd, const int rmt,
			int (*cmdfunc)(struct cmdlintf_t *, char *),
			const char *doc, const int args) {
	command_t		*ptr = &pdptr->cmdptr, *q;
	char			*word;
	int			level;
	int			wds;
	int			found;

	wds = nofwords (cmd);

	for (level = 1; level <= wds; level++) {
		if ((word = nthword (cmd, level)) == NULL) break;

		found = 0;

		for (q = ptr->subcmd; q != NULL; q = q->next) {
			if (strcmp (word, q->name) == 0) {
				found = 1;
				break;
			}
		}

		if (! found) {
			q = calloc (1, sizeof (command_t));
			q->next = ptr->subcmd;
			ptr->subcmd = q;
			q->subcmd = NULL;
			q->name  = dupstr (word);
			q->func  = NULL;
			q->doc   = NULL;
			q->nargs = 0;
			q->is_rmt= rmt;
		}

		if (level == wds) {
			if (found) {
				fprintf (stderr, "Duplicate Command\n");
				return 0;
			} else {
				if (doc != NULL) q->doc = dupstr (doc);
				q->func  = cmdfunc;
				q->nargs = args;
				return 1;
			}
		} else {
			ptr = q;
		}
	}

	return 0;
}

static command_t * find_match_as_possible (const char *text, int *mcnt) { 
	command_t		*ptr = &pdptr->cmdptr;
	command_t		*fptr = NULL;
	int			i;
	char			*word;

	for (i = 1; ptr != NULL; i++) {
		if ((word = nthword (text, i)) == NULL) break;
		if ((ptr = ptr->subcmd) == NULL) break;
		for (; ptr != NULL; ptr = ptr->next) {
			if (strcmp (ptr->name, word) == 0) {
				fptr = ptr;
				*mcnt = i;
				break;
			}
		}
	}

	return fptr;
}

static int execute_line (char *cmd) {
	int		i, retval;
	command_t	*command;
	int		len, rlen, xlen;
	char		buffer[1024];

	command = find_match_as_possible (cmd, &i);

	if (command == NULL) {
		cliptr->print ("%% %s: no such command\n", nthword (cmd, 1));
	} else if (command->func == NULL) {
		cliptr->print ("%% %s: Incomplete command.\n", cmd);
	} else if (! command->is_rmt) {
		return ((*(command->func)) (cliptr, nthwordptr (cmd, i+1)));
	} else {
		if (pdptr->svc_fd >= 0) {
			retval = 1;

			write (pdptr->svc_fd, cmd, strlen (cmd));

			read (pdptr->svc_fd, &retval, sizeof retval);
			read (pdptr->svc_fd, &len, sizeof len);

			while (len > 0) {
				if (len > sizeof buffer - 1) {
					xlen = sizeof buffer - 1;
				} else {
					xlen = len;
				}

				rlen = read (pdptr->svc_fd, buffer, xlen);

				if (rlen <= 0) break;

				fwrite (buffer, 1, rlen, stderr);
				len -= rlen;
			}

			return retval;
		} else {
			return ((*(command->func)) (cliptr,
						nthwordptr (cmd, i+1)));
		}
	}
	return 1;
}

static int cmdline_interface (void) {
	static char		*line, *linenbs;
	static int		retval, result;
	static char		*expansion;

	if (pdptr->prompt == NULL) pdptr->prompt = strdup ("cli>");

	if (! (line = readline (pdptr->prompt))) return 1;
	retval = 1;

	linenbs = stripwhite (line);

	if (*linenbs) {
		result = history_expand (linenbs, &expansion);

		if (result) cliptr->print ("%s\n", expansion);

		if ((result < 0) || (result == 2)) {
			free (expansion);
		} else {
			if (expansion[0] != ';') {
				retval = execute_line (expansion);
			}
			if (retval != 2) add_history (expansion);
			free (expansion);
			cliptr->print ("\r\n");
		}
	}

	return retval;
}

static char ** command_completion (const char *text, int start, int end) {
	char	**matches = NULL;

	if (start == 0) {
		matches = rl_completion_matches (text, command_generator);
	}

	return matches;
}

static int cli_init (void) {
	rl_catch_signals = 1;
	rl_readline_name = "CLI";
	rl_attempted_completion_function	= command_completion;
	rl_completion_entry_function		= entry_completion;
	//
	return 1;
}

static int cli_start (const int is_server) {
	int			sockfd;
	struct sockaddr_un	serv_addr;
	int			servlen;

	if (pdptr->sockname != NULL) {
		if ((sockfd = socket (PF_UNIX, SOCK_STREAM, 0)) < 0) {
			perror ("socket");
			return 0;
		}

		memset (&serv_addr, 0, sizeof (serv_addr));
		serv_addr.sun_family = AF_UNIX;
		strcpy (serv_addr.sun_path, pdptr->sockname);
		servlen = strlen (serv_addr.sun_path) +
					sizeof (serv_addr.sun_family);

		if (is_server) {
			fd_set			fds;
			struct timeval		timeout;
			int			fd, rc, clilen;
			struct sockaddr_un	cli_addr;

			if (bind (sockfd, (struct sockaddr *) &serv_addr,
							servlen) < 0) {
				perror ("bind");
				close (sockfd);
				return 0;
			}

			listen (sockfd, 5);

			bpinit ();
			cliptr->print = bprint;

			while (! pdptr->terminate) {
				FD_ZERO (&fds);
				FD_SET (sockfd, &fds);
				timeout.tv_sec  = 2;
				timeout.tv_usec = 500000;

				if ((rc = select (sockfd + 1, &fds,
						NULL, NULL, &timeout)) < 0) {
					if (errno != EINTR) perror ("select");
					continue;
				} else if (rc == 0) {
					continue;
				}

				if (FD_ISSET (sockfd, &fds)) {
					char	buffer[4096];
					int	len;
					int	retval;

					if ((fd = accept (sockfd,
						(struct sockaddr *) &cli_addr,
						&clilen)) < 0) continue;

					while ((len = read (fd,
							buffer,
							sizeof buffer-1)) > 0) {
						buffer[len] = '\0';
						retval = execute_line (buffer);

						write (fd, &retval,
								sizeof retval);
						retval = bplen ();

						write (fd, &retval,
								sizeof retval);

						write (fd, bpbptr (), retval);
						bpinit ();

						if (retval == 0) break;
					}

					close (fd);
				}
			}

			close (sockfd);
			unlink (pdptr->sockname);

			return 1;
		} else {
			if (connect (sockfd, (struct sockaddr *) &serv_addr,
						servlen) < 0) {
				perror (pdptr->sockname);
				close (sockfd);
				return 0;
			}

			cli_init ();

			pdptr->svc_fd = sockfd;
		}
	} else {
		cli_init ();
	}

	return 1;
}

static int lprint (const char *fmt, ...) {
	va_list		ap;
	int		len;
	FILE		*fp = rl_outstream;

	if (fp == NULL) fp = stderr;

	va_start (ap, fmt);
	len = vfprintf (fp, fmt, ap);
	va_end (ap);

	return len;
}

// ----------------------------------------------------------

static void regist_default_command (void) {
	if (! pdptr->have_precommand) {
		pdptr->have_precommand = 1;

		cliptr->add ("history", 0, cmd_history, NULL, 0);
		cliptr->add ("clear history", 0, cmd_clear_history, NULL, 0);
		cliptr->add ("terminate", 1, cmd_terminate, NULL, 0);
	}
}

// ----------------------------------------------------------

struct cmdlintf_t * init_cmdline_interface (void) {
	if (cliptr == NULL) {
		cliptr = & cli_intfinstance;

		cliptr->pd		= pdptr;
		cliptr->add		= cli_addcmd;
		cliptr->socket_name	= cli_socket_name;
		cliptr->start		= cli_start;
		cliptr->cli		= cmdline_interface;
		cliptr->print		= lprint;
		cliptr->regcmd		= regist_default_command;

		pdptr->sockname			= NULL;
		pdptr->terminate		= 0;
		pdptr->num_of_connection	= 0;
		pdptr->have_precommand		= 0;
		pdptr->prompt			= NULL;
		pdptr->svc_fd			= -1;

		memset (&pdptr->cmdptr, 0, sizeof (pdptr->cmdptr));
		pdptr->cmdptr.subcmd		= NULL;
		pdptr->cmdptr.next		= NULL;
	}

	return cliptr;
}
